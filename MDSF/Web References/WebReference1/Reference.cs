//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MDSF.WebReference1 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="webservice")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSalesRepOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadFillUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateReturnOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateIndirectSalesOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateIndirectSalesOrderFoodOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSettlementOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSettlement2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSettlement3OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSettlementTobaccoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDataTableOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::MDSF.Properties.Settings.Default.MDSF_WebReference1_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateCustomerCompletedEventHandler CreateCustomerCompleted;
        
        /// <remarks/>
        public event UpdateCustomerCompletedEventHandler UpdateCustomerCompleted;
        
        /// <remarks/>
        public event UpdateSalesRepCompletedEventHandler UpdateSalesRepCompleted;
        
        /// <remarks/>
        public event DownloadAllCompletedEventHandler DownloadAllCompleted;
        
        /// <remarks/>
        public event DownloadFillUpCompletedEventHandler DownloadFillUpCompleted;
        
        /// <remarks/>
        public event CreateReturnOrderCompletedEventHandler CreateReturnOrderCompleted;
        
        /// <remarks/>
        public event CreateIndirectSalesOrderCompletedEventHandler CreateIndirectSalesOrderCompleted;
        
        /// <remarks/>
        public event CreateIndirectSalesOrderFoodCompletedEventHandler CreateIndirectSalesOrderFoodCompleted;
        
        /// <remarks/>
        public event CreateSettlementCompletedEventHandler CreateSettlementCompleted;
        
        /// <remarks/>
        public event CreateSettlement2CompletedEventHandler CreateSettlement2Completed;
        
        /// <remarks/>
        public event CreateSettlement3CompletedEventHandler CreateSettlement3Completed;
        
        /// <remarks/>
        public event CreateSettlementTobaccoCompletedEventHandler CreateSettlementTobaccoCompleted;
        
        /// <remarks/>
        public event getDataTableCompletedEventHandler getDataTableCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("webservice/CreateCustomer", RequestNamespace="webservice", ResponseNamespace="webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response CreateCustomer(
                    string companyCode, 
                    string salesOrganization, 
                    string distributionChannel, 
                    string reconciliationAccount, 
                    string paymentTerms, 
                    string country, 
                    string pricingProcedure, 
                    string statisticsGroup, 
                    string taxClassification, 
                    string customerAccountGroup, 
                    string customerNumber, 
                    string name, 
                    string houseNumberAndStreet, 
                    string postalCode, 
                    string city, 
                    string telephoneNumber, 
                    string faxNumber, 
                    string customerClassification, 
                    string industryKey, 
                    string salesOffice, 
                    string salesGroup, 
                    string customerGroup, 
                    string priceGroup, 
                    string priceListType, 
                    string fromPlant, 
                    string partnerFunction, 
                    string customerNumberOfBusinessPartner, 
                    string taxCategory, 
                    string taxCategory2, 
                    string currency, 
                    string language, 
                    string shippingConditions, 
                    string region) {
            object[] results = this.Invoke("CreateCustomer", new object[] {
                        companyCode,
                        salesOrganization,
                        distributionChannel,
                        reconciliationAccount,
                        paymentTerms,
                        country,
                        pricingProcedure,
                        statisticsGroup,
                        taxClassification,
                        customerAccountGroup,
                        customerNumber,
                        name,
                        houseNumberAndStreet,
                        postalCode,
                        city,
                        telephoneNumber,
                        faxNumber,
                        customerClassification,
                        industryKey,
                        salesOffice,
                        salesGroup,
                        customerGroup,
                        priceGroup,
                        priceListType,
                        fromPlant,
                        partnerFunction,
                        customerNumberOfBusinessPartner,
                        taxCategory,
                        taxCategory2,
                        currency,
                        language,
                        shippingConditions,
                        region});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void CreateCustomerAsync(
                    string companyCode, 
                    string salesOrganization, 
                    string distributionChannel, 
                    string reconciliationAccount, 
                    string paymentTerms, 
                    string country, 
                    string pricingProcedure, 
                    string statisticsGroup, 
                    string taxClassification, 
                    string customerAccountGroup, 
                    string customerNumber, 
                    string name, 
                    string houseNumberAndStreet, 
                    string postalCode, 
                    string city, 
                    string telephoneNumber, 
                    string faxNumber, 
                    string customerClassification, 
                    string industryKey, 
                    string salesOffice, 
                    string salesGroup, 
                    string customerGroup, 
                    string priceGroup, 
                    string priceListType, 
                    string fromPlant, 
                    string partnerFunction, 
                    string customerNumberOfBusinessPartner, 
                    string taxCategory, 
                    string taxCategory2, 
                    string currency, 
                    string language, 
                    string shippingConditions, 
                    string region) {
            this.CreateCustomerAsync(companyCode, salesOrganization, distributionChannel, reconciliationAccount, paymentTerms, country, pricingProcedure, statisticsGroup, taxClassification, customerAccountGroup, customerNumber, name, houseNumberAndStreet, postalCode, city, telephoneNumber, faxNumber, customerClassification, industryKey, salesOffice, salesGroup, customerGroup, priceGroup, priceListType, fromPlant, partnerFunction, customerNumberOfBusinessPartner, taxCategory, taxCategory2, currency, language, shippingConditions, region, null);
        }
        
        /// <remarks/>
        public void CreateCustomerAsync(
                    string companyCode, 
                    string salesOrganization, 
                    string distributionChannel, 
                    string reconciliationAccount, 
                    string paymentTerms, 
                    string country, 
                    string pricingProcedure, 
                    string statisticsGroup, 
                    string taxClassification, 
                    string customerAccountGroup, 
                    string customerNumber, 
                    string name, 
                    string houseNumberAndStreet, 
                    string postalCode, 
                    string city, 
                    string telephoneNumber, 
                    string faxNumber, 
                    string customerClassification, 
                    string industryKey, 
                    string salesOffice, 
                    string salesGroup, 
                    string customerGroup, 
                    string priceGroup, 
                    string priceListType, 
                    string fromPlant, 
                    string partnerFunction, 
                    string customerNumberOfBusinessPartner, 
                    string taxCategory, 
                    string taxCategory2, 
                    string currency, 
                    string language, 
                    string shippingConditions, 
                    string region, 
                    object userState) {
            if ((this.CreateCustomerOperationCompleted == null)) {
                this.CreateCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateCustomerOperationCompleted);
            }
            this.InvokeAsync("CreateCustomer", new object[] {
                        companyCode,
                        salesOrganization,
                        distributionChannel,
                        reconciliationAccount,
                        paymentTerms,
                        country,
                        pricingProcedure,
                        statisticsGroup,
                        taxClassification,
                        customerAccountGroup,
                        customerNumber,
                        name,
                        houseNumberAndStreet,
                        postalCode,
                        city,
                        telephoneNumber,
                        faxNumber,
                        customerClassification,
                        industryKey,
                        salesOffice,
                        salesGroup,
                        customerGroup,
                        priceGroup,
                        priceListType,
                        fromPlant,
                        partnerFunction,
                        customerNumberOfBusinessPartner,
                        taxCategory,
                        taxCategory2,
                        currency,
                        language,
                        shippingConditions,
                        region}, this.CreateCustomerOperationCompleted, userState);
        }
        
        private void OnCreateCustomerOperationCompleted(object arg) {
            if ((this.CreateCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCustomerCompleted(this, new CreateCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("webservice/UpdateCustomer", RequestNamespace="webservice", ResponseNamespace="webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response UpdateCustomer(
                    string companyCode, 
                    string salesOrganization, 
                    string distributionChannel, 
                    string reconciliationAccount, 
                    string paymentTerms, 
                    string country, 
                    string pricingProcedure, 
                    string statisticsGroup, 
                    string taxClassification, 
                    string customerAccountGroup, 
                    string customerNumber, 
                    string name, 
                    string houseNumberAndStreet, 
                    string postalCode, 
                    string city, 
                    string telephoneNumber, 
                    string faxNumber, 
                    string customerClassification, 
                    string industryKey, 
                    string salesOffice, 
                    string salesGroup, 
                    string customerGroup, 
                    string priceGroup, 
                    string priceListType, 
                    string fromPlant, 
                    string partnerFunction, 
                    string customerNumberOfBusinessPartner, 
                    string taxCategory, 
                    string taxCategory2, 
                    string currency, 
                    string language, 
                    string shippingConditions, 
                    string region) {
            object[] results = this.Invoke("UpdateCustomer", new object[] {
                        companyCode,
                        salesOrganization,
                        distributionChannel,
                        reconciliationAccount,
                        paymentTerms,
                        country,
                        pricingProcedure,
                        statisticsGroup,
                        taxClassification,
                        customerAccountGroup,
                        customerNumber,
                        name,
                        houseNumberAndStreet,
                        postalCode,
                        city,
                        telephoneNumber,
                        faxNumber,
                        customerClassification,
                        industryKey,
                        salesOffice,
                        salesGroup,
                        customerGroup,
                        priceGroup,
                        priceListType,
                        fromPlant,
                        partnerFunction,
                        customerNumberOfBusinessPartner,
                        taxCategory,
                        taxCategory2,
                        currency,
                        language,
                        shippingConditions,
                        region});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCustomerAsync(
                    string companyCode, 
                    string salesOrganization, 
                    string distributionChannel, 
                    string reconciliationAccount, 
                    string paymentTerms, 
                    string country, 
                    string pricingProcedure, 
                    string statisticsGroup, 
                    string taxClassification, 
                    string customerAccountGroup, 
                    string customerNumber, 
                    string name, 
                    string houseNumberAndStreet, 
                    string postalCode, 
                    string city, 
                    string telephoneNumber, 
                    string faxNumber, 
                    string customerClassification, 
                    string industryKey, 
                    string salesOffice, 
                    string salesGroup, 
                    string customerGroup, 
                    string priceGroup, 
                    string priceListType, 
                    string fromPlant, 
                    string partnerFunction, 
                    string customerNumberOfBusinessPartner, 
                    string taxCategory, 
                    string taxCategory2, 
                    string currency, 
                    string language, 
                    string shippingConditions, 
                    string region) {
            this.UpdateCustomerAsync(companyCode, salesOrganization, distributionChannel, reconciliationAccount, paymentTerms, country, pricingProcedure, statisticsGroup, taxClassification, customerAccountGroup, customerNumber, name, houseNumberAndStreet, postalCode, city, telephoneNumber, faxNumber, customerClassification, industryKey, salesOffice, salesGroup, customerGroup, priceGroup, priceListType, fromPlant, partnerFunction, customerNumberOfBusinessPartner, taxCategory, taxCategory2, currency, language, shippingConditions, region, null);
        }
        
        /// <remarks/>
        public void UpdateCustomerAsync(
                    string companyCode, 
                    string salesOrganization, 
                    string distributionChannel, 
                    string reconciliationAccount, 
                    string paymentTerms, 
                    string country, 
                    string pricingProcedure, 
                    string statisticsGroup, 
                    string taxClassification, 
                    string customerAccountGroup, 
                    string customerNumber, 
                    string name, 
                    string houseNumberAndStreet, 
                    string postalCode, 
                    string city, 
                    string telephoneNumber, 
                    string faxNumber, 
                    string customerClassification, 
                    string industryKey, 
                    string salesOffice, 
                    string salesGroup, 
                    string customerGroup, 
                    string priceGroup, 
                    string priceListType, 
                    string fromPlant, 
                    string partnerFunction, 
                    string customerNumberOfBusinessPartner, 
                    string taxCategory, 
                    string taxCategory2, 
                    string currency, 
                    string language, 
                    string shippingConditions, 
                    string region, 
                    object userState) {
            if ((this.UpdateCustomerOperationCompleted == null)) {
                this.UpdateCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCustomerOperationCompleted);
            }
            this.InvokeAsync("UpdateCustomer", new object[] {
                        companyCode,
                        salesOrganization,
                        distributionChannel,
                        reconciliationAccount,
                        paymentTerms,
                        country,
                        pricingProcedure,
                        statisticsGroup,
                        taxClassification,
                        customerAccountGroup,
                        customerNumber,
                        name,
                        houseNumberAndStreet,
                        postalCode,
                        city,
                        telephoneNumber,
                        faxNumber,
                        customerClassification,
                        industryKey,
                        salesOffice,
                        salesGroup,
                        customerGroup,
                        priceGroup,
                        priceListType,
                        fromPlant,
                        partnerFunction,
                        customerNumberOfBusinessPartner,
                        taxCategory,
                        taxCategory2,
                        currency,
                        language,
                        shippingConditions,
                        region}, this.UpdateCustomerOperationCompleted, userState);
        }
        
        private void OnUpdateCustomerOperationCompleted(object arg) {
            if ((this.UpdateCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCustomerCompleted(this, new UpdateCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("webservice/UpdateSalesRep", RequestNamespace="webservice", ResponseNamespace="webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response UpdateSalesRep(string salesRep, string customers) {
            object[] results = this.Invoke("UpdateSalesRep", new object[] {
                        salesRep,
                        customers});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSalesRepAsync(string salesRep, string customers) {
            this.UpdateSalesRepAsync(salesRep, customers, null);
        }
        
        /// <remarks/>
        public void UpdateSalesRepAsync(string salesRep, string customers, object userState) {
            if ((this.UpdateSalesRepOperationCompleted == null)) {
                this.UpdateSalesRepOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSalesRepOperationCompleted);
            }
            this.InvokeAsync("UpdateSalesRep", new object[] {
                        salesRep,
                        customers}, this.UpdateSalesRepOperationCompleted, userState);
        }
        
        private void OnUpdateSalesRepOperationCompleted(object arg) {
            if ((this.UpdateSalesRepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSalesRepCompleted(this, new UpdateSalesRepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("webservice/DownloadAll", RequestNamespace="webservice", ResponseNamespace="webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DownloadAll(string materialNumber, string languageKey, string conditionType, string materialType, string materialType2, string materialType3) {
            object[] results = this.Invoke("DownloadAll", new object[] {
                        materialNumber,
                        languageKey,
                        conditionType,
                        materialType,
                        materialType2,
                        materialType3});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadAllAsync(string materialNumber, string languageKey, string conditionType, string materialType, string materialType2, string materialType3) {
            this.DownloadAllAsync(materialNumber, languageKey, conditionType, materialType, materialType2, materialType3, null);
        }
        
        /// <remarks/>
        public void DownloadAllAsync(string materialNumber, string languageKey, string conditionType, string materialType, string materialType2, string materialType3, object userState) {
            if ((this.DownloadAllOperationCompleted == null)) {
                this.DownloadAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadAllOperationCompleted);
            }
            this.InvokeAsync("DownloadAll", new object[] {
                        materialNumber,
                        languageKey,
                        conditionType,
                        materialType,
                        materialType2,
                        materialType3}, this.DownloadAllOperationCompleted, userState);
        }
        
        private void OnDownloadAllOperationCompleted(object arg) {
            if ((this.DownloadAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadAllCompleted(this, new DownloadAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("webservice/DownloadFillUp", RequestNamespace="webservice", ResponseNamespace="webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DownloadFillUp() {
            object[] results = this.Invoke("DownloadFillUp", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadFillUpAsync() {
            this.DownloadFillUpAsync(null);
        }
        
        /// <remarks/>
        public void DownloadFillUpAsync(object userState) {
            if ((this.DownloadFillUpOperationCompleted == null)) {
                this.DownloadFillUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadFillUpOperationCompleted);
            }
            this.InvokeAsync("DownloadFillUp", new object[0], this.DownloadFillUpOperationCompleted, userState);
        }
        
        private void OnDownloadFillUpOperationCompleted(object arg) {
            if ((this.DownloadFillUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadFillUpCompleted(this, new DownloadFillUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("webservice/CreateReturnOrder", RequestNamespace="webservice", ResponseNamespace="webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response CreateReturnOrder(string salesDocumentType, string salesOrganization, string distributionChannel, string division, string customerNumber, string partnerFunction, string customerNumber2, string originatingDocument, string salesGroup, string txtItems, string txtConditions) {
            object[] results = this.Invoke("CreateReturnOrder", new object[] {
                        salesDocumentType,
                        salesOrganization,
                        distributionChannel,
                        division,
                        customerNumber,
                        partnerFunction,
                        customerNumber2,
                        originatingDocument,
                        salesGroup,
                        txtItems,
                        txtConditions});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void CreateReturnOrderAsync(string salesDocumentType, string salesOrganization, string distributionChannel, string division, string customerNumber, string partnerFunction, string customerNumber2, string originatingDocument, string salesGroup, string txtItems, string txtConditions) {
            this.CreateReturnOrderAsync(salesDocumentType, salesOrganization, distributionChannel, division, customerNumber, partnerFunction, customerNumber2, originatingDocument, salesGroup, txtItems, txtConditions, null);
        }
        
        /// <remarks/>
        public void CreateReturnOrderAsync(string salesDocumentType, string salesOrganization, string distributionChannel, string division, string customerNumber, string partnerFunction, string customerNumber2, string originatingDocument, string salesGroup, string txtItems, string txtConditions, object userState) {
            if ((this.CreateReturnOrderOperationCompleted == null)) {
                this.CreateReturnOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateReturnOrderOperationCompleted);
            }
            this.InvokeAsync("CreateReturnOrder", new object[] {
                        salesDocumentType,
                        salesOrganization,
                        distributionChannel,
                        division,
                        customerNumber,
                        partnerFunction,
                        customerNumber2,
                        originatingDocument,
                        salesGroup,
                        txtItems,
                        txtConditions}, this.CreateReturnOrderOperationCompleted, userState);
        }
        
        private void OnCreateReturnOrderOperationCompleted(object arg) {
            if ((this.CreateReturnOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateReturnOrderCompleted(this, new CreateReturnOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("webservice/CreateIndirectSalesOrder", RequestNamespace="webservice", ResponseNamespace="webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response CreateIndirectSalesOrder(string salesDocumentType, string salesOrganization, string distributionChannel, string division, string customerNumber, string partnerFunction, string customerNumber2, string originatingDocument, string salesGroup, string txtItems, string txtConditions, string date) {
            object[] results = this.Invoke("CreateIndirectSalesOrder", new object[] {
                        salesDocumentType,
                        salesOrganization,
                        distributionChannel,
                        division,
                        customerNumber,
                        partnerFunction,
                        customerNumber2,
                        originatingDocument,
                        salesGroup,
                        txtItems,
                        txtConditions,
                        date});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void CreateIndirectSalesOrderAsync(string salesDocumentType, string salesOrganization, string distributionChannel, string division, string customerNumber, string partnerFunction, string customerNumber2, string originatingDocument, string salesGroup, string txtItems, string txtConditions, string date) {
            this.CreateIndirectSalesOrderAsync(salesDocumentType, salesOrganization, distributionChannel, division, customerNumber, partnerFunction, customerNumber2, originatingDocument, salesGroup, txtItems, txtConditions, date, null);
        }
        
        /// <remarks/>
        public void CreateIndirectSalesOrderAsync(string salesDocumentType, string salesOrganization, string distributionChannel, string division, string customerNumber, string partnerFunction, string customerNumber2, string originatingDocument, string salesGroup, string txtItems, string txtConditions, string date, object userState) {
            if ((this.CreateIndirectSalesOrderOperationCompleted == null)) {
                this.CreateIndirectSalesOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateIndirectSalesOrderOperationCompleted);
            }
            this.InvokeAsync("CreateIndirectSalesOrder", new object[] {
                        salesDocumentType,
                        salesOrganization,
                        distributionChannel,
                        division,
                        customerNumber,
                        partnerFunction,
                        customerNumber2,
                        originatingDocument,
                        salesGroup,
                        txtItems,
                        txtConditions,
                        date}, this.CreateIndirectSalesOrderOperationCompleted, userState);
        }
        
        private void OnCreateIndirectSalesOrderOperationCompleted(object arg) {
            if ((this.CreateIndirectSalesOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateIndirectSalesOrderCompleted(this, new CreateIndirectSalesOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("webservice/CreateIndirectSalesOrderFood", RequestNamespace="webservice", ResponseNamespace="webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response CreateIndirectSalesOrderFood(string salesDocumentType, string salesOrganization, string distributionChannel, string division, string customerNumber, string partnerFunction, string customerNumber2, string originatingDocument, string salesGroup, string txtItems, string txtConditions, string date) {
            object[] results = this.Invoke("CreateIndirectSalesOrderFood", new object[] {
                        salesDocumentType,
                        salesOrganization,
                        distributionChannel,
                        division,
                        customerNumber,
                        partnerFunction,
                        customerNumber2,
                        originatingDocument,
                        salesGroup,
                        txtItems,
                        txtConditions,
                        date});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void CreateIndirectSalesOrderFoodAsync(string salesDocumentType, string salesOrganization, string distributionChannel, string division, string customerNumber, string partnerFunction, string customerNumber2, string originatingDocument, string salesGroup, string txtItems, string txtConditions, string date) {
            this.CreateIndirectSalesOrderFoodAsync(salesDocumentType, salesOrganization, distributionChannel, division, customerNumber, partnerFunction, customerNumber2, originatingDocument, salesGroup, txtItems, txtConditions, date, null);
        }
        
        /// <remarks/>
        public void CreateIndirectSalesOrderFoodAsync(string salesDocumentType, string salesOrganization, string distributionChannel, string division, string customerNumber, string partnerFunction, string customerNumber2, string originatingDocument, string salesGroup, string txtItems, string txtConditions, string date, object userState) {
            if ((this.CreateIndirectSalesOrderFoodOperationCompleted == null)) {
                this.CreateIndirectSalesOrderFoodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateIndirectSalesOrderFoodOperationCompleted);
            }
            this.InvokeAsync("CreateIndirectSalesOrderFood", new object[] {
                        salesDocumentType,
                        salesOrganization,
                        distributionChannel,
                        division,
                        customerNumber,
                        partnerFunction,
                        customerNumber2,
                        originatingDocument,
                        salesGroup,
                        txtItems,
                        txtConditions,
                        date}, this.CreateIndirectSalesOrderFoodOperationCompleted, userState);
        }
        
        private void OnCreateIndirectSalesOrderFoodOperationCompleted(object arg) {
            if ((this.CreateIndirectSalesOrderFoodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateIndirectSalesOrderFoodCompleted(this, new CreateIndirectSalesOrderFoodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("webservice/CreateSettlement", RequestNamespace="webservice", ResponseNamespace="webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response CreateSettlement(string fillupOrder, System.Data.DataTable dtSettlementHeader, System.Data.DataTable dtPickedItems, System.Data.DataTable dtIssusedItems, System.Data.DataTable dtConditions) {
            object[] results = this.Invoke("CreateSettlement", new object[] {
                        fillupOrder,
                        dtSettlementHeader,
                        dtPickedItems,
                        dtIssusedItems,
                        dtConditions});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSettlementAsync(string fillupOrder, System.Data.DataTable dtSettlementHeader, System.Data.DataTable dtPickedItems, System.Data.DataTable dtIssusedItems, System.Data.DataTable dtConditions) {
            this.CreateSettlementAsync(fillupOrder, dtSettlementHeader, dtPickedItems, dtIssusedItems, dtConditions, null);
        }
        
        /// <remarks/>
        public void CreateSettlementAsync(string fillupOrder, System.Data.DataTable dtSettlementHeader, System.Data.DataTable dtPickedItems, System.Data.DataTable dtIssusedItems, System.Data.DataTable dtConditions, object userState) {
            if ((this.CreateSettlementOperationCompleted == null)) {
                this.CreateSettlementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSettlementOperationCompleted);
            }
            this.InvokeAsync("CreateSettlement", new object[] {
                        fillupOrder,
                        dtSettlementHeader,
                        dtPickedItems,
                        dtIssusedItems,
                        dtConditions}, this.CreateSettlementOperationCompleted, userState);
        }
        
        private void OnCreateSettlementOperationCompleted(object arg) {
            if ((this.CreateSettlementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSettlementCompleted(this, new CreateSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("webservice/CreateSettlement2", RequestNamespace="webservice", ResponseNamespace="webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response CreateSettlement2(string fillupOrder, System.Data.DataTable dtSettlementHeader, System.Data.DataTable dtPickedItems, System.Data.DataTable dtIssusedItems, System.Data.DataTable dtConditions) {
            object[] results = this.Invoke("CreateSettlement2", new object[] {
                        fillupOrder,
                        dtSettlementHeader,
                        dtPickedItems,
                        dtIssusedItems,
                        dtConditions});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSettlement2Async(string fillupOrder, System.Data.DataTable dtSettlementHeader, System.Data.DataTable dtPickedItems, System.Data.DataTable dtIssusedItems, System.Data.DataTable dtConditions) {
            this.CreateSettlement2Async(fillupOrder, dtSettlementHeader, dtPickedItems, dtIssusedItems, dtConditions, null);
        }
        
        /// <remarks/>
        public void CreateSettlement2Async(string fillupOrder, System.Data.DataTable dtSettlementHeader, System.Data.DataTable dtPickedItems, System.Data.DataTable dtIssusedItems, System.Data.DataTable dtConditions, object userState) {
            if ((this.CreateSettlement2OperationCompleted == null)) {
                this.CreateSettlement2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSettlement2OperationCompleted);
            }
            this.InvokeAsync("CreateSettlement2", new object[] {
                        fillupOrder,
                        dtSettlementHeader,
                        dtPickedItems,
                        dtIssusedItems,
                        dtConditions}, this.CreateSettlement2OperationCompleted, userState);
        }
        
        private void OnCreateSettlement2OperationCompleted(object arg) {
            if ((this.CreateSettlement2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSettlement2Completed(this, new CreateSettlement2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("webservice/CreateSettlement3", RequestNamespace="webservice", ResponseNamespace="webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response CreateSettlement3(string fillupOrder, System.Data.DataTable dtSettlementHeader, System.Data.DataTable dtPickedItems, System.Data.DataTable dtIssusedItems, System.Data.DataTable dtConditions) {
            object[] results = this.Invoke("CreateSettlement3", new object[] {
                        fillupOrder,
                        dtSettlementHeader,
                        dtPickedItems,
                        dtIssusedItems,
                        dtConditions});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSettlement3Async(string fillupOrder, System.Data.DataTable dtSettlementHeader, System.Data.DataTable dtPickedItems, System.Data.DataTable dtIssusedItems, System.Data.DataTable dtConditions) {
            this.CreateSettlement3Async(fillupOrder, dtSettlementHeader, dtPickedItems, dtIssusedItems, dtConditions, null);
        }
        
        /// <remarks/>
        public void CreateSettlement3Async(string fillupOrder, System.Data.DataTable dtSettlementHeader, System.Data.DataTable dtPickedItems, System.Data.DataTable dtIssusedItems, System.Data.DataTable dtConditions, object userState) {
            if ((this.CreateSettlement3OperationCompleted == null)) {
                this.CreateSettlement3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSettlement3OperationCompleted);
            }
            this.InvokeAsync("CreateSettlement3", new object[] {
                        fillupOrder,
                        dtSettlementHeader,
                        dtPickedItems,
                        dtIssusedItems,
                        dtConditions}, this.CreateSettlement3OperationCompleted, userState);
        }
        
        private void OnCreateSettlement3OperationCompleted(object arg) {
            if ((this.CreateSettlement3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSettlement3Completed(this, new CreateSettlement3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("webservice/CreateSettlementTobacco", RequestNamespace="webservice", ResponseNamespace="webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response CreateSettlementTobacco(string fillupOrder, System.Data.DataTable dtSettlementHeader, System.Data.DataTable dtPickedItems, System.Data.DataTable dtIssusedItems, System.Data.DataTable dtConditions) {
            object[] results = this.Invoke("CreateSettlementTobacco", new object[] {
                        fillupOrder,
                        dtSettlementHeader,
                        dtPickedItems,
                        dtIssusedItems,
                        dtConditions});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSettlementTobaccoAsync(string fillupOrder, System.Data.DataTable dtSettlementHeader, System.Data.DataTable dtPickedItems, System.Data.DataTable dtIssusedItems, System.Data.DataTable dtConditions) {
            this.CreateSettlementTobaccoAsync(fillupOrder, dtSettlementHeader, dtPickedItems, dtIssusedItems, dtConditions, null);
        }
        
        /// <remarks/>
        public void CreateSettlementTobaccoAsync(string fillupOrder, System.Data.DataTable dtSettlementHeader, System.Data.DataTable dtPickedItems, System.Data.DataTable dtIssusedItems, System.Data.DataTable dtConditions, object userState) {
            if ((this.CreateSettlementTobaccoOperationCompleted == null)) {
                this.CreateSettlementTobaccoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSettlementTobaccoOperationCompleted);
            }
            this.InvokeAsync("CreateSettlementTobacco", new object[] {
                        fillupOrder,
                        dtSettlementHeader,
                        dtPickedItems,
                        dtIssusedItems,
                        dtConditions}, this.CreateSettlementTobaccoOperationCompleted, userState);
        }
        
        private void OnCreateSettlementTobaccoOperationCompleted(object arg) {
            if ((this.CreateSettlementTobaccoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSettlementTobaccoCompleted(this, new CreateSettlementTobaccoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("webservice/getDataTable", RequestNamespace="webservice", ResponseNamespace="webservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getDataTable(string fillUpOrder) {
            object[] results = this.Invoke("getDataTable", new object[] {
                        fillUpOrder});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getDataTableAsync(string fillUpOrder) {
            this.getDataTableAsync(fillUpOrder, null);
        }
        
        /// <remarks/>
        public void getDataTableAsync(string fillUpOrder, object userState) {
            if ((this.getDataTableOperationCompleted == null)) {
                this.getDataTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDataTableOperationCompleted);
            }
            this.InvokeAsync("getDataTable", new object[] {
                        fillUpOrder}, this.getDataTableOperationCompleted, userState);
        }
        
        private void OngetDataTableOperationCompleted(object arg) {
            if ((this.getDataTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDataTableCompleted(this, new getDataTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="webservice")]
    public partial class Response {
        
        private string messageField;
        
        private string message2Field;
        
        private string message3Field;
        
        private string typeField;
        
        private System.Data.DataTable tableField;
        
        private System.Data.DataTable table2Field;
        
        private string successField;
        
        private bool flagField;
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string message2 {
            get {
                return this.message2Field;
            }
            set {
                this.message2Field = value;
            }
        }
        
        /// <remarks/>
        public string message3 {
            get {
                return this.message3Field;
            }
            set {
                this.message3Field = value;
            }
        }
        
        /// <remarks/>
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable table {
            get {
                return this.tableField;
            }
            set {
                this.tableField = value;
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable table2 {
            get {
                return this.table2Field;
            }
            set {
                this.table2Field = value;
            }
        }
        
        /// <remarks/>
        public string success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public bool flag {
            get {
                return this.flagField;
            }
            set {
                this.flagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CreateCustomerCompletedEventHandler(object sender, CreateCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void UpdateCustomerCompletedEventHandler(object sender, UpdateCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void UpdateSalesRepCompletedEventHandler(object sender, UpdateSalesRepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSalesRepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSalesRepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void DownloadAllCompletedEventHandler(object sender, DownloadAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void DownloadFillUpCompletedEventHandler(object sender, DownloadFillUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadFillUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadFillUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CreateReturnOrderCompletedEventHandler(object sender, CreateReturnOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateReturnOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateReturnOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CreateIndirectSalesOrderCompletedEventHandler(object sender, CreateIndirectSalesOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateIndirectSalesOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateIndirectSalesOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CreateIndirectSalesOrderFoodCompletedEventHandler(object sender, CreateIndirectSalesOrderFoodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateIndirectSalesOrderFoodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateIndirectSalesOrderFoodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CreateSettlementCompletedEventHandler(object sender, CreateSettlementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSettlementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSettlementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CreateSettlement2CompletedEventHandler(object sender, CreateSettlement2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSettlement2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSettlement2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CreateSettlement3CompletedEventHandler(object sender, CreateSettlement3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSettlement3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSettlement3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CreateSettlementTobaccoCompletedEventHandler(object sender, CreateSettlementTobaccoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSettlementTobaccoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSettlementTobaccoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void getDataTableCompletedEventHandler(object sender, getDataTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDataTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDataTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591